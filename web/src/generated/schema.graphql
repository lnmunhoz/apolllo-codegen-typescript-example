type AuthPayload {
  token: String!
  user: User!
}

scalar DateTime

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createDraft(title: String!, text: String!): Post!
  publish(id: ID!): Post!
  deletePost(id: ID!): Post!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  author: User!
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

type Query {
  feed: [Post!]!
  drafts: [Post!]!
  post(id: ID!): Post
  me: User
}

type Subscription {
  feedSubscription: PostSubscriptionPayload!
}

type User {
  id: ID!
  email: String!
  name: String!
  posts: [Post!]!
}

